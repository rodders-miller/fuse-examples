<!--

     Copyright 2005-2014 Red Hat, Inc.

     Red Hat licenses this file to you under the Apache License, version
     2.0 (the "License"); you may not use this file except in compliance
     with the License.  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
     implied.  See the License for the specific language governing
     permissions and limitations under the License.

-->
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <!-- Allows us to use system properties and fabric as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties">
            <bean class="io.fabric8.mq.fabric.ConfigurationProperties"/>
        </property>
    </bean>

    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="${broker-name}" dataDirectory="${data}" start="false" restartAllowed="false">

        <destinationPolicy>
            <policyMap>
              <policyEntries>

			  <!-- All queues have flow control enabled and have a DLQ - the DQL should always remain empty, but to trap corner cases they are enabled here -->
			  <policyEntry queue=">"  producerFlowControl="true" >
					<deadLetterStrategy>
						<!--
						Use the prefix 'dlq.' for the destination name, and make
						the DLQ a queue rather than a topic and ensure all queued messages are handled inc. non persistent
						Note:  individual DLQ strategy overrides the shared and will default values such as processNonPersistent="true"
						-->
						<individualDeadLetterStrategy queuePrefix="dlq." useQueueForQueueMessages="true"  processNonPersistent="true" />
					</deadLetterStrategy>  
			  </policyEntry>
			 
				<!-- Policy entries for inbound and outbound queues with percentage of the total disk and memory availability set
				     The percentages should be a relative portion of the overall space based on relative usage of that queue
					 all inbound and outbound queue have prioritized messages turned on 
				-->
				<policyEntry queue="inbound.>" prioritizedMessages="true"  />
                <policyEntry queue="inbound.TEST1" storeUsageHighWaterMark="${inbound.percentage.TEST1}"  cursorMemoryHighWaterMark="${inbound.percentage.TEST1}" />
				<policyEntry queue="inbound.TEST2" storeUsageHighWaterMark="${inbound.percentage.TEST2}"  cursorMemoryHighWaterMark="${inbound.percentage.TEST2}" />
				<policyEntry queue="inbound.TEST3" storeUsageHighWaterMark="${inbound.percentage.TEST3}"  cursorMemoryHighWaterMark="${inbound.percentage.TEST3}" />

				<policyEntry queue="outbound.>" prioritizedMessages="true" />
                <policyEntry queue="outbound.TEST1" storeUsageHighWaterMark="${outbound.percentage.TEST1}"  cursorMemoryHighWaterMark="${outbound.percentage.TEST1}" />
				<policyEntry queue="outbound.TEST2" storeUsageHighWaterMark="${outbound.percentage.TEST2}"  cursorMemoryHighWaterMark="${outbound.percentage.TEST2}" />
				<policyEntry queue="outbound.TEST3" storeUsageHighWaterMark="${outbound.percentage.TEST3}"  cursorMemoryHighWaterMark="${outbound.percentage.TEST3}" />
				<policyEntry queue="outbound.TEST4" storeUsageHighWaterMark="${outbound.percentage.TEST4}"  cursorMemoryHighWaterMark="${outbound.percentage.TEST4}" />

				<!-- Policy entries for the audit queues, note that the data covers the request and responses
					 The percentages should be a relative portion of the overall space based on relative usage of that queue 
				-->
				<policyEntry queue="audit.events" storeUsageHighWaterMark="${audit.events.percentage}"  cursorMemoryHighWaterMark="${audit.events.percentage}" />
				<policyEntry queue="audit.data.>" storeUsageHighWaterMark="${audit.data.percentage}"  cursorMemoryHighWaterMark="${audit.data.percentage}" />
				
				
              </policyEntries>
            </policyMap>
        </destinationPolicy>

        <managementContext>
            <managementContext createConnector="false"/>
        </managementContext>

        <persistenceAdapter>
            <kahaDB directory="${data}/kahadb"/>
        </persistenceAdapter>

        <plugins>
            <jaasAuthenticationPlugin configuration="karaf" />
            <authorizationPlugin>
              <map>
                <authorizationMap groupClass="org.apache.karaf.jaas.boot.principal.RolePrincipal">
                  <!-- manager,viewer,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin,User -->
                  <authorizationEntries>
                    <authorizationEntry queue=">" read="manager,viewer,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin" write="manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin" admin="manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin"/>
                    <authorizationEntry topic=">" read="manager,viewer,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin" write="manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin" admin="manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin"/>
                    <authorizationEntry topic="ActiveMQ.Advisory.>" read="manager,viewer,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin,User" write="manager,viewer,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin,User" admin="manager,viewer,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin,User" />
                  </authorizationEntries>
                  <tempDestinationAuthorizationEntry>
                    <tempDestinationAuthorizationEntry read="manager,viewer,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin" write="manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin" admin="manager,Operator,Maintainer,Deployer,Auditor,Administrator,SuperUser,admin"/>
                  </tempDestinationAuthorizationEntry>
                </authorizationMap>
              </map>
            </authorizationPlugin>
        </plugins>

        <systemUsage>
		
			<!-- Configure the broker to not block when the disk space is full - this result in an JMSResourceException being thrown to the client 
			     rather than blocking indefinitely 
			-->
            <systemUsage sendFailIfNoSpaceAfterTimeout="1000">
                <memoryUsage>
                    <memoryUsage percentOfJvmHeap="${total-memory-percent-of-jvm}"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="${total-queue-disk-space}"/>
                </storeUsage>
				
				<!-- temp usage not utilised as we are only considering persistent messages -->
                <tempUsage>
                    <tempUsage limit="50mb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

        <transportConnectors>
            <transportConnector name="openwire" uri="tcp://${bindAddress}:${bindPort}"/>
        </transportConnectors>
		
		
		<!-- configure the system to start with specific queues rather then creating them demand - this makes monitoring and testing easier -->
		<destinations>
				<queue physicalName="inbound.TEST1" />
				<queue physicalName="inbound.TEST2" />
				<queue physicalName="inbound.TEST3" />
				<queue physicalName="outbound.TEST1" />
				<queue physicalName="outbound.TEST2" />
				<queue physicalName="outbound.TEST3" />
				<queue physicalName="outbound.TEST4" />
				<queue physicalName="audit.data.request" />
				<queue physicalName="audit.data.response" />
				<queue physicalName="audit.data.event" />	
		</destinations>
		
    </broker>

</beans>